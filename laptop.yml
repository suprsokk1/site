# -*- mode: yaml -*-
---
- hosts: all
  connection: local
  gather_facts: no
  vars:
    _:
    - name: todo
      meta: noop
      vars:
        b: &become
          become: yes
          become_user: root
        c: &common
          register: res
          when: res is successfull
        l: &loop
          loop_control:
            extended: true
            loop_var: item
        d: &display
          no_log: no

- hosts: all
  connection: local
  gather_facts: no
  vars:

  handlers: &handlers
    - name: ====FULL STOP====
      block: &full_stop
        - meta: end_play
        - meta: end_host

  pre_tasks:
    - meta: noop

  tasks:
  - debug: msg={{cmd}}
    vars:
      cmd: >-
        fd places ${HOME}/.mozilla -a -e sqlite -X bash -c '{{__inner}}'
      __inner: >-
        {{_inner|regex_replace("'","'\''")}}
      _inner: >-
        pushd $(mktemp -d) &&
        trap 'rm -v -- DB EXIT' &&
        cp -- {} DB &&
        sqlite3 DB -json
        <<<
        'select * from moz_places;'

  # - meta: end_play
  # - meta: end_host

- hosts: all
  gather_facts: no
  connection: local
  # delegate_to: localhost
  become_user: root
  tasks:
    - ansible.builtin.dnf: name=cargo,python3-jmespath state=installed
      become: yes

    - name: Galaxy collections
      become: no
      when: no
      block:
      - ignore_errors: yes
        shell: >-
          ansible-galaxy
          collection
          install
          {{_collections|json_query('name')}}
      rescue:
      - ignore_errors: yes
        shell: >-
          ansible-galaxy
          collection
          install sivel.toiletwater

  vars:
    _collections:
    # - name: amazon.aws
    # - name: ansible.builtin
    # - name: ansible.windows
    # - name: arista.eos
    # - name: awx.awx
    # - name: azure.azcollection
    # - name: check_point.mgmt
    # - name: chocolatey.chocolatey
    # - name: cisco.aci
    # - name: cisco.asa
    # - name: cisco.dnac
    # - name: cisco.intersight
    # - name: cisco.ios
    # - name: cisco.iosxr
    # - name: cisco.ise
    # - name: cisco.meraki
    # - name: cisco.mso
    # - name: cisco.nso
    # - name: cisco.nxos
    # - name: cisco.ucs
    # - name: cloudscale_ch.cloud
    # - name: community.aws
    # - name: community.ciscosmb
    # - name: community.crypto
    # - name: community.fortios
    # - name: community.grafana
    # - name: community.hashi_vault
    # - name: community.hrobot
    # - name: community.mongodb
    # - name: community.mysql
    # - name: community.okd
    # - name: community.postgresql
    # - name: community.proxysql
    # - name: community.rabbitmq
    # - name: community.routeros
    # - name: community.sap
    # - name: community.sap_libs
    # - name: community.skydive
    # - name: community.sops
    # - name: community.vmware
    # - name: community.windows
    # - name: community.zabbix
    # - name: containers.podman
    # - name: cyberark.conjur
    # - name: cyberark.pas
    # - name: dellemc.enterprise_sonic
    # - name: dellemc.openmanage
    # - name: dellemc.powerflex
    # - name: dellemc.unity
    # - name: f5networks.f5_modules
    # - name: fortinet.fortimanager
    # - name: fortinet.fortios
    # - name: frr.frr
    # - name: gluster.gluster
    # - name: google.cloud
    # - name: grafana.grafana
    # - name: hetzner.hcloud
    # - name: hpe.nimble
    # - name: ibm.qradar
    # - name: ibm.spectrum_virtualize
    # - name: infinidat.infinibox
    # - name: infoblox.nios_modules
    # - name: inspur.ispim
    # - name: inspur.sm
    # - name: junipernetworks.junos
    # - name: lowlydba.sqlserver
    # - name: microsoft.ad
    # - name: netapp.aws
    # - name: netapp.azure
    # - name: netapp.cloudmanager
    # - name: netapp.elementsw
    # - name: netapp.ontap
    # - name: netapp.storagegrid
    # - name: netapp.um_info
    # - name: netapp_eseries.santricity
    # - name: netbox.netbox
    # - name: ngine_io.cloudstack
    # - name: ngine_io.exoscale
    # - name: ngine_io.vultr
    # - name: openstack.cloud
    # - name: openvswitch.openvswitch
    # - name: ovirt.ovirt
    # - name: purestorage.flasharray
    # - name: purestorage.flashblade
    # - name: purestorage.fusion
    # - name: sensu.sensu_go
    # - name: servicenow.servicenow
    # - name: splunk.es
    # - name: t_systems_mms.icinga_director
    # - name: telekom_mms.icinga_director
    # - name: vmware.vmware_rest
    # - name: vultr.cloud
    # - name: vyos.vyos
    # - name: wti.remote
    - name: ansible.netcommon
    - name: ansible.posix
    - name: ansible.utils
    - name: cloud.common
    - name: community.azure
    - name: community.digitalocean
    - name: community.dns
    - name: community.docker
    - name: community.general
    - name: community.google
    - name: community.libvirt
    - name: community.network
    - name: kubernetes.core
    - name: sivel.toiletwater
    - name: theforeman.foreman


- hosts: all
  connection: local
  gather_facts: no
  become: no
  no_log: yes
  handlers: *handlers
  environment:

    # inhibit playbook lockup
    GIT_TERMINAL_PROMPT: 0

    # review safe for other packages?
    CARGO_FEATURE_PCRE2: 1

  module_defaults:
    # cron: user="{{ lookup('ansible.builtin.env', 'USER') }}" backup=true

  post_tasks:

  tasks:
    - debug: var=_msg
      tags: always
      no_log: no
      when: COMMENT
      vars:
        queries: >-
          {{vars['items']|map('list')|flatten|unique }}

        gq: >-
          keys(@.items[:3])

        _msg: |
          {{_q|from_yaml}}

        _q: |
          ---
          {% for __name__, __query__ in (_q|from_yaml) %}
          {{__name__}}: >-
            {{items|json_query(__query__)}}
          {% endfor %}
          ...

        q: |
          ---
          {% for qname in queries %}
          q_{{qname}}: >-
            [?{{qname}}].*[]
          {% endfor %}
          ...

        _def: >-
          ********************************************************************************
    - block:
      - <<: *full_stop
      when: COMMENT

    - user: name=geir uid=1000 shell=/bin/zsh groups=users,wheel

    - user: name=nemo uid=9000 shell=/bin/zsh groups=adm

    - name: catppuccin / (TODO zsh-users)
      vars:
        overrides:
      tags: git zsh catppuccin
      block:

      # - file: path="{{item.key|dirname}}" state=directory recurse=yes
      #   <<: *loop

      - git: dest="{{item.key}}" repo="{{item.value}}"
        with_dict: "{{git_repos}}"
        <<: *loop

      - cron: name="{{item.value}}" job="git pull -C {{item.key}} --rebase --autostash" minute="*/{{cron.interval|default('5')}}" user="{{ lookup('ansible.builtin.env', 'USER') }}" backup=yes
        become: no
        with_dict: "{{git_repos}}"
        <<: *loop

      rescue:
        - meta: flush_handlers

      # - cron: name=

    - name: >-
        Install ripgrep with PCRE2 enabled
      when: COMMENT
      community.general.cargo:
        name: ripgrep
        state: present
      environment:
        CARGO_FEATURE_PCRE2: 1


    - name: >-
        Install packages
      no_log: &packages_log
      vars:
        crates: >-
          {{ items|json_query('[?crate].*.name[]')|default([]) }}
        _creates: >-
          {{crates|length}}
        eggs: >-
          {{ items|json_query('[?egg].*.name[]')|default([]) }}
        _egg: >-
          {{egg|length}}

      rescue:
        - meta: noop
      block:
        - when: _crates
          community.general.cargo:
            state: present
            name: >-
              {{crates}}
              

        - when:
          community.general.pipx:
            state: present
            name: >-
              {{eggs}}

    - name: Enable service
      service: name="{{item}}" state="started" enabled=yes
      become: yes
      no_log: *packages_log
      loop: "{{ items|json_query('[?service].*.name[]')|default(omit) }}"

    - name: Disable service
      systemd: name="{{item}}" state=stopped enabled=no masked=yes
      no_log: *packages_log
      become: yes
      loop: "{{ items|json_query('[?service_disable].*.name[]')|default(omit) }}"

    - name: Assertions
      tags: assert
      vars: &json_query
        q:
          shell_aliases: >-
            [?shell_alias].*[]
          dotfiles: >-
            [?dotfile].*[]
          zsh_ext_aliases: >-
            [?zsh_ext_alias].*[]
        __shell_aliases: >-
          {{ items | json_query(q.shell_aliases) }}
        __dotfiles: >-
          {{ items | json_query(q.dotfiles) }}
        __zsh_ext_aliases: >-
          {{ items | json_query(q.zsh_ext_aliases) }}
        _checks:
          - "{{__shell_aliases}}"
          - "{{__dotfiles}}"
          - "{{__zsh_ext_aliases}}"
      block:
        - <<: *loop
          loop: "{{_checks}}"
          assert: that="{{item|length != 0}}"
      rescue:
        - meta: flush_handlers

    - name: >-
        Dotfiles
      tags: dotfiles
      vars: *json_query
      <<: *display
      block:
        - name: Install users dotfiles
          <<: *display
          copy: dest="{{item.path}}" mode=0640 content="{{item.content}}" validate="{{item.validate|default(omit)}}" backup=yes
          with_items: "{{__dotfiles}}"

        - name: ~/.zshrc
          vars:
            _validate: >-
              /bin/zsh -c 'grep -w -- "=emacsclient" %s && source %s'
            _dest: >-
              {{lookup('env', 'HOME')}}/.zshrc
            __zsh_ext_aliases: >-
              {{items | json_query('[?zsh_ext_alias].*[]')}}
            __zsh_plugins: >-
              {{items | json_query('[?zsh_plugin].*.name[]') | join(' ')}}
            _content: |
              export ZSH="$HOME/.oh-my-zsh"
              export ZSH_THEME="gentoo"
              DISABLE_UNTRACKED_FILES_DIRTY="true"

              EDITOR='emacsclient -nw'; export EDITOR
              FZF_DEFAULT_OPTS=' --multi --exact --bind '\''ctrl-s:toggle-all'\'' '; export FZF_DEFAULT_OPTS

              {% for alias in __shell_aliases %}
              alias -- {{alias.name}}='{{alias.command}}'
              {% endfor %}

              {% for alias in __zsh_ext_aliases %}
              alias -s {{alias.name}}='{{_default.zsh_ext_alias}}'
              {% endfor %}

              plugins=({{ __zsh_plugins }})

              source $ZSH/oh-my-zsh.sh
          ansible.builtin.copy:
            backup: yes
            validate: "{{_validate|default(omit)}}"
            dest: "{{_dest}}"
            content: "{{_content}}"

    - set_fact: script_path={{lookup('env', 'HOME')}}/.script

    - stat: path="{{script_path}}"
      register: script

    - file: path={{lookup('env', 'HOME')}}/.local/share/catppuccin state=directory recurse=yes


  vars:
    ___sysctl:
      net:
        ipv4:
          tcp_rmem: '4096 65536 16777216'

    __git_repos:
      com:
        gitlab:
          jlecomte: [ansible/ansible-roster]
        github:
          catppuccin: [dunst,emacs,alacritty,sway,waybar]
          systemd-cron: [systemd-cron-next]

    _default:
      zsh_ext_alias: >-
        command gh magic

    git_repo:
      list:
        - https://github.com/redhat-developer/yaml-language-server.git
        - https://gitlab.com/jlecomte/ansible/ansible-roster.git
        - https://github.com/doomemacs/doomemacs.git
        - https://github.com/catppuccin/dunst.git
        - https://github.com/catppuccin/emacs.git
        - https://github.com/catppuccin/alacritty.git
        - https://github.com/catppuccin/sway.git
        - https://github.com/catppuccin/waybar.git

    git_repos: "{{_git_repos|from_yaml}}"
    _git_repos: |
      ---
      {% for _dom, _sites in __git_repos.items() %}
      {% for _sitename, _user in _sites.items() %}
      {% for _username, _repositories in _user.items() %}
      {% for _reponame in _repositories %}
      {{lookup('env', 'HOME')}}/opt/{{_sitename}}/{{_username}}: https://{{_sitename}}.{{_dom}}/{{_username}}/{{_reponame}}.git
      {% endfor %}
      {% endfor %}
      {% endfor %}
      {% endfor %}
      ...


    shims:
      dir: ~/.shims

      paths:
        - "~/.local/share/pipx/venvs/*/bin"

    _items__json_query: >-
      @.*.name[]

    _items: >-
      {{json_query(_items__json_query)}}

    items:
      - TODO:
          name: .mozilla/.../chrome/userChrome.css

      - TODO:
          name: Install precommit

      - TODO:
          name: Install and configure tailscale

      - TODO:
          name: Parse ORG files with python

      - TODO:
          name: Import cronjobs

      - TODO:
          name: Import FireFox bookmarks

      - TODO:
          name: Import FireFox bookmarks as ORG files
          desc: |
            F.ex. in folder ~/org/roam/bookmarks

      - TODO:
          name: before save file hook validate file

      - TODO:
          name: Install osquery

      - TODO:
          name: Replace stowed files with "regular file"

      - TODO:
          name: Import Emacs yasnippets

      - TODO:
          name: External (f.ex. from terminal) org-capture

      - TODO:
          name: Inject data into YAML file

      - TODO:
          name: Terminal URL detection and execution


      - TODO:
          name: Normalize fonts
          desc:
            - editor
            - terminal:
                - kitty
                - alacritty
            - gtk
            - browser

      - TODO:
          name: Normalize color theme
          desc:
            - editor
            - terminal:
                - Env. vars: LS_COLORS, GREP_COLORS ..
            - gtk
            - browser:
                - FireFox

      - zsh_ext_alias:
          name: git

      - shell_alias:
          name: -firefox.bookmarks
          command: >-
            fd -a places ${HOME}/.mozilla -e sqlite -X
            bash -c 'pushd $(mktemp -d)
            && trap '\''rm -v -- DB'\'' EXIT
            && cp -- {} DB
            && sqlite3 DB  -json <<< '\''select * from moz_places;'\'''

      - TODO:
          name: zram swap

      - TODO:
          name: Setup btrfs snapshots with timeshift

      - TODO:
          name: zsh "directory shortcuts" with "hash -d"

      - TODO:
          name: zsh default file ext. handler with "alias -s"

      - TODO:
          name: cfengine like symbols/variables

      # - shell_alias:
      #     name: ls
      #     command: 'exa --group-directories-first --git --icons -lp'

      # - shell_alias:
      #     name: ls
      #     command: 'exa'

      - TODO:
          name: install coredns?

      - TODO:
          name: disable mdns
          desc: |
            avahi*

      - TODO:
          name: DELETEME
          desc: |
            # /etc/dnf/dnf.conf
            [fedora]
            name=Fedora $releasever - $basearch
            metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch
            gpgkey=https://getfedora.org/static/fedora.gpg

            [updates]
            name=Fedora $releasever - $basearch - Updates
            metalink=https://mirrors.fedoraproject.org/metalink?repo=updates-released-f$releasever&arch=$basearch
            gpgkey=https://getfedora.org/static/fedora.gpg

            :*: The fedora.gpg file contain the gpg keys for the latest Fedora releases https://getfedora.org/security/. To set up a minimal Fedora 37 container:

            cd /var/lib/machines
            mkdir container-name
            dnf --releasever=37 --best --setopt=install_weak_deps=False --repo=fedora --repo=updates --installroot=/var/lib/machines/container-name install dhcp-client dnf fedora-release glibc glibc-langpack-en iputils less ncurses passwd systemd systemd-networkd systemd-resolved util-linux vim-default-editor

      - env:
          name: GDK_THEME
          value: Adwaita:dark

      - application:
          name: ydotool
          rpm: ydotool
          service: ydotool

      - application:
          name: NetworkManager
          dirs:
            - /etc/NetworkManager
          files:
            - /etc/NetworkManager/NetworkManager.conf

      - application:
          name: vector
          dirs:
            - /etc/vector
          container: vector

      - journald_namespace:
          name: user
          config: |
            [Journal]
            #Storage=auto
            #Compress=yes
            #Seal=yes
            #SplitMode=uid
            #SyncIntervalSec=5m
            #RateLimitIntervalSec=30s
            #RateLimitBurst=10000
            #SystemMaxUse=
            #SystemKeepFree=
            #SystemMaxFileSize=
            #SystemMaxFiles=100
            #RuntimeMaxUse=
            #RuntimeKeepFree=
            #RuntimeMaxFileSize=
            #RuntimeMaxFiles=100
            #MaxRetentionSec=
            #MaxFileSec=1month
            #ForwardToSyslog=no
            #ForwardToKMsg=no
            #ForwardToConsole=no
            #ForwardToWall=yes
            #TTYPath=/dev/console
            #MaxLevelStore=debug
            #MaxLevelSyslog=debug
            #MaxLevelKMsg=notice
            #MaxLevelConsole=info
            #MaxLevelWall=emerg
            #LineMax=48K
            #ReadKMsg=yes
            #Audit=yes

      - egg:
          name: tmuxp

      - egg:
          name: precommit

      - keybinding:
          name: example
          app: fzf

      - import:
          name: FireFox bookmarks

      - shell_alias:
          name: cat
          command: 'bat'

      - shell_alias:
          name: ls
          command: 'lsd'

      - statusbar_module:
          todo:

      - fzf:
          env: >-
            FZF_DEFAULT_COMMAND='fd --type f --hidden --exclude .git'
            FZF_DEFAULT_OPTS=' --reverse --exact --bind '\''ctrl-s:toggle-all'\'' --multi '

            FZF_LINES           number of lines fzf takes up excluding padding and margin
            FZF_COLUMNS         number of columns fzf takes up excluding padding and margin
            FZF_TOTAL_COUNT     total number of items
            FZF_MATCH_COUNT     number of matched items
            FZF_SELECT_COUNT    number of selected items
            FZF_POS             vertical position of the cursor in the list starting from 1
            FZF_QUERY           current query string
            FZF_PROMPT          prompt string
            FZF_PREVIEW_LABEL   preview label string
            FZF_BORDER_LABEL    border label string
            FZF_ACTION          the name of the last action performed
            FZF_KEY             the name of the last key pressed
            FZF_PORT            port number when --listen option is used

            Then following variables are additionally exported to the preview commands.

            FZF_PREVIEW_TOP     top position of the preview window
            FZF_PREVIEW_LEFT    left position of the preview window
            FZF_PREVIEW_LINES   number of lines in the preview window
            FZF_PREVIEW_COLUMNS number of columns in the preview window

      - rpm:
          name: speedtest-cli

      - rpm:
          name: kernel-devel
      - rpm:
          name: ruby-devel
      - rpm:
          name: tldr
      - rpm:
          name: syncthing
      - rpm:
          name: ydotool
      - rpm:
          name: networkmanager-tui
      - rpm:
          name: shellcheck
      - rpm:
          name: alacritty
      - rpm:
          name: anaconda
      - rpm:
          name: anaconda-live
      - rpm:
          name: ansible
      - rpm:
          name: ansifilter
      - rpm:
          name: arm-image-installer
      - rpm:
          name: atk-devel
      - rpm:
          name: audispd-plugins
      - rpm:
          name: autoconf
      - rpm:
          name: blueman
      - rpm:
          name: borgbackup
      - rpm:
          name: brightnessctl
      - rpm:
          name: btop
      - rpm:
          name: cairo-devel
      - rpm:
          name: cargo
      - rpm:
          name: chromium
      - rpm:
          name: clang16-resource-filesystem
      - rpm:
          name: cmake
      - rpm:
          name: cronie
      - rpm:
          name: dbus-devel
      - rpm:
          name: ddgr
      - rpm:
          name: dialog
      - rpm:
          name: direnv
      - rpm:
          name: docker-compose
      - rpm:
          name: dracut-live
      - rpm:
          name: editorconfig
      - rpm:
          name: emacs
      - rpm:
          name: etckeeper
      - rpm:
          name: expect
      - rpm:
          name: fd-find
      - rpm:
          name: ffmpeg
      - rpm:
          name: fontconfig-devel
      - rpm:
          name: freerdp
      - rpm:
          name: freetype-devel
      - rpm:
          name: fswatch
      - rpm:
          name: fzf
      - rpm:
          name: gammastep
      - rpm:
          name: gh
      - rpm:
          name: ghostscript-tools-fonts
      - rpm:
          name: ghostscript-tools-printing
      - rpm:
          name: giflib-devel
      - rpm:
          name: git-delta
      - rpm:
          name: gnutls-devel
      - rpm:
          name: golang
      - rpm:
          name: gparted
      - rpm:
          name: gpm-devel
      - rpm:
          name: gron
      - rpm:
          name: gstreamer1-plugins-bad-free-extras
      - rpm:
          name: gstreamer1-plugins-bad-free-fluidsynth
      - rpm:
          name: gstreamer1-plugins-bad-free-opencv
      - rpm:
          name: gstreamer1-plugins-bad-free-wildmidi
      - rpm:
          name: gstreamer1-plugins-bad-free-zbar
      - rpm:
          name: gstreamer1-plugins-bad-freeworld
      - rpm:
          name: gstreamer1-plugins-good-extras
      - rpm:
          name: gtk3-devel
      - rpm:
          name: harfbuzz-devel
      - rpm:
          name: incron
      - rpm:
          name: intel-media-driver
      - rpm:
          name: jansson-devel
      - rpm:
          name: jc
      - rpm:
          name: jo
      - rpm:
          name: kitty
      - rpm:
          name: langpacks-en
      - rpm:
          name: libx11-devel
      - rpm:
          name: libxau-devel
      - rpm:
          name: libxdmcp-devel
      - rpm:
          name: libxi-devel
      - rpm:
          name: libxpm-devel
      - rpm:
          name: libxrender-devel
      - rpm:
          name: libxt-devel
      - rpm:
          name: libacl-devel
      - rpm:
          name: libgccjit-devel
      - rpm:
          name: libjpeg-turbo-devel
      - rpm:
          name: liblockfile-devel
      - rpm:
          name: libnsl
      - rpm:
          name: libotf-devel
      - rpm:
          name: libpng-devel
      - rpm:
          name: libreswan
      - rpm:
          name: librsvg2-devel
      - rpm:
          name: libselinux-devel
      - rpm:
          name: libsqlite3x-devel
      - rpm:
          name: libtiff-devel
      - rpm:
          name: libtree-sitter-devel
      - rpm:
          name: libva-intel-hybrid-driver
      - rpm:
          name: libva-utils
      - rpm:
          name: libwebp-devel
      - rpm:
          name: libxml2-devel
      - rpm:
          name: livesys-scripts
      - rpm:
          name: m17n-lib-devel
      - rpm:
          name: moby-engine
      - rpm:
          name: moreutils
      - rpm:
          name: ncurses-devel
      - rpm:
          name: nmap
      - rpm:
          name: nnn
      - rpm:
          name: nodejs
      - rpm:
          name: nodejs-bash-language-server
      - rpm:
          name: openscap
      - rpm:
          name: openscap-utils
      - rpm:
          name: openssh-askpass
      - rpm:
          name: pandoc
      - rpm:
          name: pass
      - rpm:
          name: pavucontrol
      - rpm:
          name: pinentry-emacs
      - rpm:
          name: pinentry-qt
      - rpm:
          name: pinentry-tty
      - rpm:
          name: pipx
      - rpm:
          name: powertop
      - rpm:
          name: python3-ansible-lint
      - rpm:
          name: python3-jmespath
      - rpm:
          name: python3-pip
      - rpm:
          name: python3-qrcode
      - rpm:
          name: qutebrowser
      - rpm:
          name: rclone
      - rpm:
          name: ripgrep
      - rpm:
          name: rofi-wayland
      - rpm:
          name: rpmfusion-free-release
      - rpm:
          name: rpmfusion-nonfree-release
      - rpm:
          name: scap-security-guide
      - rpm:
          name: scap-workbench
      - rpm:
          name: stow
      - rpm:
          name: systemd-devel
      - rpm:
          name: tailscale
      - rpm:
          name: texinfo
      - rpm:
          name: timeshift
      - rpm:
          name: tlp
      - rpm:
          name: tmux
      - rpm:
          name: vim-enhanced
      - rpm:
          name: webkit2gtk4.1-devel
      - rpm:
          name: wlsunset
      - rpm:
          name: xorg-x11-proto-devel
      - rpm:
          name: xz-lzma-compat
      - rpm:
          name: kitty
      - rpm:
          name: alacritty
      - rpm:
          name: zlib-ng-compat-devel
      - rpm:
          name: zsh
      - crate:
          name: grex
      - crate:
          name: fd-find
      - crate:
          name: zoxide
      - crate:
          name: git-delta
      - crate:
          name: lsd
      - crate:
          name: topgrade
      - crate:
          name: bat
      - rpm:
          name: qutebrowser
      - rpm:
          name: rclone
      - rpm:
          name: ripgrep
      - rpm:
          name: rofi-wayland
      - rpm:
          name: rpmfusion-free-release
      - rpm:
          name: rpmfusion-nonfree-release
      - rpm:
          name: scap-security-guide
      - rpm:
          name: scap-workbench
      - rpm:
          name: stow
      - rpm:
          name: systemd
      - rpm:
          name: tailscale
      - rpm:
          name: texinfo
      - rpm:
          name: timeshift
      - rpm:
          name: tlp
      - rpm:
          name: tmux
      - rpm:
          name: vim-enhanced
      - rpm:
          name: webkit2gtk4.1
      - rpm:
          name: wlsunset
      - rpm:
          name: ydotool
      - rpm:
          name: zlib-ng-compat
      - rpm:
          name: zsh

      - zsh_plugin:
          name: zsh-autosuggestions     # sourced at end of ~/.zshrc
          source: git
      - zsh_plugin:
          name: ansible
      - zsh_plugin:
          name: docker
      - zsh_plugin:
          name: emacs

      # - zsh_plugin:
      #     name: emacs-cli

      # - zsh_plugin:
      #     name: fd

      - zsh_plugin:
          name: fzf
      - zsh_plugin:
          name: gh
      - zsh_plugin:
          name: git
      - zsh_plugin:
          name: pass
      # - zsh_plugin:
      #     name: ripgrep
      - zsh_plugin:
          name: ssh
      - zsh_plugin:
          name: ssh-agent
      - zsh_plugin:
          name: z
      - zsh_plugin:
          name: zoxide

      # - dotfile:
      #     content: |
      #       export zsh="$home/.oh-my-zsh"
      #       zsh_theme="gentoo"
      #       disable_untracked_files_dirty="true"

      #       fzf_default_opts=' --exact --bind '\''ctrl-s:toggle-all'\'' --multi '; export fzf_default_opts

      #       plugins={{ items|qjson_query('[?zsh_plugin].*.name[]')|join(' ') }}
      #       source $ZSH/oh-my-zsh.sh

      # -*- mode: conf -*-

      - dotfile:
          name: tmux
          path: >-
            {{lookup('env', 'HOME')}}/.config/tmux/tmux.conf
          validate: 'true %s'
          content: |
            # TODO adjust for x11 and wayland
            set-option -g  copy-command wl-copy
            set-option -g  base-index      1
            set-option -g  pane-base-index 1
            set-option -g  mouse on               # mouse scroll activates copy-mode

            set-option -g  pane-border-status off # statusbar position
            set-option -g  status             off # enabled=[on|off]

            set-option -gw xterm-keys on          # ???

            set-option -g  update-environment  'DISPLAY WAYLAND_DISPLAY I3SOCK SWAYSOCK SSH_ASKPASS SSH_AUTH_SOCK PAGER MANPAGER SYSTEMD LSCOLORS LS_COLORS'
            set-option -g  prefix C-Space
            set-option -g  default-command /usr/bin/zsh
            set-option -g  default-shell   /usr/bin/bash
            set-option -sa terminal-overrides  ',xterm:Tc'
            set-option -sa terminal-features   ',rxvt-unicode-256color:clipboard:extkeys'
            unbind-key -T prefix t
            unbind-key Space

            bind-key -n C-z resize-pane -Z
            bind-key -n 'M-`' display-popup -E -w 100 -h 30

            bind-key C-s        set-option synchronize-panes
            bind-key -n M-Tab   select-pane -t'{previous}'
            bind-key -n M-S-Tab select-pane -t'{next}'

            bind-key -n M-\] next-window
            bind-key -n M-\[ previous-window
            bind-key -n M-\} next-layout
            bind-key -n M-\{ previous-layout

            bind-key -n M-1 select-pane -t1
            bind-key -n M-2 select-pane -t2
            bind-key -n M-3 select-pane -t3
            bind-key -n M-4 select-pane -t4
            bind-key -n C-\\ split-window -c '#{pane_current_path}' \; select-layout tiled

            {#
            bind-key -n C-\\ split-window -c '#{pane_current_path}' /bin/zsh \; select-layout tiled
            bind-key -n C-\\ split-window -c '#{pane_current_path}' \; select-layout tiled
            bind-key -n C-g  split-window -Z -c '#{pane_current_path}' "env /bin/bash -ac 'set -x; fzf '"
            bind-key -n C-g  split-window -Z -c '#{pane_current_path}' "env /bin/bash -ac 'set -x; fzf '"
            #}

            bind-key -n C-g display-popup -e 'FZF_DEFAULT_COMMAND="tmux capture-pane -p"' -E -w 100 -h 30 'tmux resize-pane -Z ;  '

            unbind-key -n C-g
            unbind-key -n C-\\

            bind-key r "source ~/.config/tmux/tmux.conf"
            display-popup -E -w 100 -h 30 'neofetch; tput bold; echo "******** Config reloaded ********"; sleep 3'


      - dotfile:
          name: topgrade
          path: >-
            {{lookup('env', 'HOME')}}/.config/topgrade/topgrade.toml
          validate: >-
            jy -tj %s
          content: |
            # Include any additional configuration file(s)
            # [include] sections are processed in the order you write them
            # Files in $CONFIG_DIR/topgrade.d/ are automatically included before this file
            [include]
            paths = [
                "/etc/topgrade.toml",
                "~/.config/topgrade.d/*.toml"
            ]

            [misc]
            # Run `sudo -v` to cache credentials at the start of the run
            # This avoids a blocking password prompt in the middle of an unattended run
            # (default: false)
            # pre_sudo = false

            # Sudo command to be used
            sudo_command = "sudo"

            # Disable specific steps - same options as the command line flag
            # disable = ["system", "emacs"]

            # Ignore failures for these steps
            # ignore_failures = ["powershell"]

            # List of remote machines with Topgrade installed on them
            # remote_topgrades = ["toothless", "pi", "parnas"]

            # Path to Topgrade executable on remote machines
            # remote_topgrade_path = ".cargo/bin/topgrade"

            # Arguments to pass to SSH when upgrading remote systems
            # ssh_arguments = "-o ConnectTimeout=2"

            # Arguments to pass tmux when pulling Repositories
            tmux_arguments = "-S /var/tmux.sock"

            # Do not set the terminal title (default: true)
            set_title = true

            # Display the time in step titles (default: true)
            # display_time = true

            # Don't ask for confirmations (no default value)
            assume_yes = true

            # Do not ask to retry failed steps (default: false)
            # no_retry = true

            # Run inside tmux (default: false)
            run_in_tmux = true

            # Cleanup temporary or old files (default: false)
            # cleanup = true

            # Send a notification for every step (default: false)
            notify_each_step = false

            # Skip sending a notification at the end of a run (default: false)
            # skip_notify = true

            # The Bash-it branch to update (default: "stable")
            # bashit_branch = "stable"

            # Run specific steps - same options as the command line flag
            # only = ["system", "emacs"]

            # Whether to self update
            #
            # this will be ignored if the binary is built without self update support
            #
            # available also via setting the environment variable TOPGRADE_NO_SELF_UPGRADE)
            # no_self_update = true

            # Extra tracing filter directives
            # These are prepended to the `--log-filter` argument
            # See: https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives
            # log_filters = ["topgrade::command=debug", "warn"]


            # Commands to run before anything
            [pre_commands]
            # "Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"


            # Commands to run after anything
            [post_commands]
            # "Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"


            # Custom commands
            [commands]
            # "Python Environment" = "~/dev/.env/bin/pip install -i https://pypi.python.org/simple -U --upgrade-strategy eager jupyter"
            # "Custom command using interactive shell (unix)" = "-i vim_upgrade"


            [python]
            # enable_pip_review = true                         ###disabled by default
            # enable_pip_review_local = true                   ###disabled by default
            # enable_pipupgrade = true                         ###disabled by default
            # pipupgrade_arguments = "-y -u --pip-path pip"    ###disabled by default


            [composer]
            # self_update = true


            [brew]
            # greedy_cask = true
            # autoremove = true


            [linux]
            # Arch Package Manager to use.
            # Allowed values:
            #   autodetect, aura, garuda_update, pacman, pamac, paru, pikaur, trizen, yay
            # arch_package_manager = "pacman"

            # Arguments to pass yay (or paru) when updating packages
            # yay_arguments = "--nodevel"

            # Arguments to pass dnf when updating packages
            # dnf_arguments = "--refresh"

            # aura_aur_arguments = "-kx"

            # aura_pacman_arguments = ""
            # garuda_update_arguments = ""

            # show_arch_news = true

            # trizen_arguments = "--devel"

            # pikaur_arguments = ""

            # pamac_arguments = "--no-devel"

            # enable_tlmgr = true

            # emerge_sync_flags = "-q"

            # emerge_update_flags = "-uDNa --with-bdeps=y world"

            # redhat_distro_sync = false

            # suse_dup = false

            # rpm_ostree = false

            # nix_arguments = "--flake"

            # nix_env_arguments = "--prebuilt-only"

            # Extra Home Manager arguments
            # home_manager_arguments = ["--flake", "file"]
            [git]
            # How many repos to pull at max in parallel
            # max_concurrency = 5

            # Additional git repositories to pull
            repos = [
                "~/opt/*/",
                "~/git/*/*/",
                "~/git/*/*/*",
            ]

            # Don't pull the predefined git repos
            # pull_predefined = false

            # Arguments to pass Git when pulling Repositories
            arguments = "--rebase --autostash"


            [windows]
            # Manually select Windows updates
            # accept_all_updates = false

            # open_remotes_in_new_terminal = true

            # wsl_update_pre_release = true

            # wsl_update_use_web_download = true

            # Causes Topgrade to rename itself during the run to allow package managers
            # to upgrade it. Use this only if you installed Topgrade by using a package
            # manager such as Scoop or Cargo
            # self_rename = true

            # Enable WinGet upgrade
            # enable_winget = true


            [npm]
            # Use sudo if the NPM directory isn't owned by the current user
            # use_sudo = true


            [yarn]
            # Run `yarn global upgrade` with `sudo`
            # use_sudo = true


            [vim]
            # For `vim-plug`, execute `PlugUpdate!` instead of `PlugUpdate`
            # force_plug_update = true


            [firmware]
            # Offer to update firmware; if false just check for and display available updates
            # upgrade = true


            [vagrant]
            # Vagrant directories
            # directories = []

            # power on vagrant boxes if needed
            # power_on = true

            # Always suspend vagrant boxes instead of powering off
            # always_suspend = true


            [flatpak]
            # Use sudo for updating the system-wide installation
            # use_sudo = true


            [distrobox]
            # use_root = false

            # containers = ["archlinux-latest"]
            [containers]
            # ignored_containers = ["ghcr.io/rancher-sandbox/rancher-desktop/rdx-proxy:latest"]


      - dotfile:
          name: jq
          path: ~/.jq
          validate: >-
            jq -s /dev/null `# %s`
          content: |
            # iproute2 | $ ip -json route show
            def net: . as $root |.[]|
                select(
                    .dev == ( $root[]|select(.dst == "default") ).dev
                ) | select(.protocol == "kernel").dst
            ;

            def gron:
              paths(scalars) as $p | $p + [getpath($p)]  | join(":")
            ;

            def _: .[]| with_entries(
                          if .key == "command"
                          then .key = "job"
                          end
                        )
            ;


      - dotfile:
          name: 'Emacs font'
          path: >-
            {{lookup('env', 'HOME')}}/.config/doom/.fonts.el
          content: >-
            (setq doom-font
              (font-spec :family "UbuntuSansMono Nerd Font Propo" :height 98))

      - dotfile:
          name: waybar config
          path: >-
            {{lookup('env', 'HOME')}}/.config/waybar/config
          content: >-
            {{waybar.config|to_json}}

      - dotfile:
          name: waybar style.css
          path: >-
            {{lookup('env', 'HOME')}}/.config/waybar/style.css
          content: |
            @import "catppuccin/mocha.css";

            * {
              font-family: UbuntuSansMono Nerd Font Propo;
              color: @blue;
            }


      - dotfile:
          name: sway
          path: >-
            {{lookup('env', 'HOME')}}/.config/sway/config
          validate: 'sway --validate --config %s'
          content: |
            # -*- mode: conf -*-
            xwayland 1

            gaps inner 0
            gaps outer 0

            smart_gaps on

            font pango:terminus       10

            # remove border
            default_border            none
            smart_borders             on


            set  $backtick grave
            set  $MOD      Mod4
            set  $META     Mod1

            # reload sway config
            bindsym $META+$MOD+c reload
            bindsym $META+$MOD+r reload

            # launcher (app launcher)
            bindsym $MOD+d exec rofi -show combi

            # launcher (window switch)
            bindsym $MOD+$backtick exec rofi -show window

            # Alt+Tab window switching
            bindsym $MOD+Tab       focus right
            bindsym $MOD+Shift+Tab focus left

            bindsym $META+Return   fullscreen toggle

            bindsym $META+$MOD+f   floating toggle

            bindsym $MOD+1 [floating] move scratchpad
            bindsym $MOD+2 nop

            set $size_ppt 100

            bindsym $MOD+3 {
              [floating app_id=(?i)alacritty] scratchpad show;  [floating app_id=(?i)alacritty] resize set $size_ppt ppt $size_ppt ppt; [floating app_id=(?i)alacritty] move position center
            }
            bindsym $MOD+4 {
              [floating app_id=(?i)firefox] scratchpad show;  [floating app_id=(?i)firefox] resize set $size_ppt ppt $size_ppt ppt; [floating app_id=(?i)firefox] move position center
            }

            bindsym $MOD+5 nop
            bindsym $MOD+6 nop
            bindsym $MOD+7 nop

            # bindsym {
            #   $META+$MOD+p mark --toggle pin
            # }

            for_window [class=.*] floating enable
            for_window [app_id=.*] floating enable

            # text editor
            for_window [class=(?i)emacs] floating disable
            for_window [app_id=(?i)emacs] floating disable

            # terminal
            # [app_id=(?i)alacritty]

            # web browsers
            # [app_id=(?i)org.qutebrowser.qutebrowser]

            for_window [app_id=(?i)firefox|qutebrowser|microsoft.edge|alacritty] floating enable
            for_window [floating] move position center


            # bar {
            #     id top
            #     swaybar_command waybar

            #     # output eDP-1

            #     # # strip_workspace_numbers yes|no
            #     # strip_workspace_numbers yes

            #     # # strip_workspace_name yes|no
            #     # strip_workspace_name yes

            #     # position top

            #     # # mode hide
            #     # modifier $MOD
            # }


            input type:keyboard {
              xkb_options caps:hyper,grp:rctrl_toggle
              xkb_layout  us,no

              # default: 250
              repeat_delay 250

              # default: 45
              repeat_rate 20
            }


            input type:touchpad {
               dwt              enabled
               tap              enabled
               natural_scroll   enabled
               middle_emulation enabled

               # disable mouse acceleration (enabled by default; to set it manually, use

               # "adaptive" instead of "flat")
               accel_profile "flat"

               # set mouse sensitivity (between -1 and 1)
               pointer_accel 0.5
            }


            output {
                 eDP-1 {
                   scale 1.5
            #=====================WWWWxHHHH=====WWWW==HHHH===
                       resolution 1920x1080 pos    0     0
            #=====================WWWWxHHHH=====WWWW==HHHH===
                 }
            }


            include "chassis/$(hostnamectl chassis)/bindings"
            include "theme/default"
            include "font/*"

            exec_always --no-startup-id dbus-update-activation-environment --systemd WAYLAND_DISPLAY DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY
            exec_always --no-startup-id dbus-update-activation-environment
            exec_always --no-startup-id systemd-run --user --unit=waybar2 waybar || systemctl --user restart waybar2


      - dotfile:
          name: rofi
          path: >-
            {{lookup('env', 'HOME')}}/.config/rofi/config.rasi
          content: |
            /* -*- mode: css -*- */
            @theme "theme.rasi"

            listview {
                lines: 8;
                scrollbar: false;
            }

            configuration {
              font: "San Francisco Display 20";
              show-icons: true;
              combi-modes: "poc,emacs,sway,clipboard,window,drun";
              combi-hide-mode-prefix: true;
            }

            window {
                /* background-color: rgba(100, 100, 100, 100%); */
                close-on-delete: true;
                window-hide-active-window: true;
                window-command: "gh _rofi_window_command";
                /* background-color: rgba(100, 100, 100, 100%); */
                /* background-color: var(bg-window); */
                background-color: var(bg-window);
                reverse: true;
            }

            timeout {
                action: "kb-cancel";
                delay:  0;
            }

            filebrowser {
                directories-first: true;
                sorting-method:    "name";
            }

            entry {
                text-color:        var(text-input);
                cursor:            text;
                spacing:           5;
                placeholder-color: Gray;
                placeholder:       "Type to filter";
            }

            inputbar {
                text-color: var(text-selection);
                padding:    1px ;
                spacing:    0px ;
                children:   var(input-items);
            }

            textbox {
                text-color:       var(text-normal);
            }

            element-icon {
                background-color: transparent;
                size:             1.5000em ;
                cursor:           inherit;
                text-color:       var(text-normal);
            }

            box {
                text-color:       var(text-normal);
            }

            element {
                text-color:       var(text-normal);
                padding: 7px ;
                cursor:  pointer;
                spacing: 5px ;
                border:  0;
            }

            element selected {
                text-color:       var(text-selection);
            }

            element normal.normal {
                text-color:       var(text-normal);
            }

            element normal.urgent {
                text-color:       var(text-normal);
            }

            element normal.active {
                text-color:       var(text-selection);
            }

            element selected.normal {
                text-color:       var(text-selection);
            }

            element selected.urgent {
                text-color:       var(text-selection);
            }

            element selected.active {
                text-color:       var(text-selection);
            }

            element alternate.normal {
                text-color:       var(text-normal);
            }

            element alternate.urgent {
                text-color:       var(text-normal);
            }

            element alternate.active {
                text-color:       var(text-normal);
            }

      - dotfile:
          name: gh
          path: >-
            {{lookup('env', 'HOME')}}/.config/gh/config.yml
          validate: 'yj -yj %s'
          content: |
            {{gh.config|to_yaml}}

      # - dotfile:
      #     name: alacritty
      #     path: ~/.config/alacritty/config.toml
      #     validate: 'yj -tj %s'
      #     content: |
      #       {{alacritty.config|toml}}

      - system_file:
          path: /etc/NetworkManager/conf.d/tun.conf
          content: >-
            [keyfile]
            unmanaged-devices=interface-name:tun*

      - system_file:
          path: /etc/NetworkManager/conf.d/tailscale.conf
          content: >-
            [keyfile]
            unmanaged-devices=interface-name:tailscale*

      - system_file:
          path: /etc/NetworkManager/conf.d/wgpia.conf
          content: >-
            [keyfile]
            unmanaged-devices=interface-name:wgpia*dd

      - system_file:
          path: >-
            /etc/NetworkManager/dispatcher.d/99dns.sh
          mode: >-
            0750
          content: >-
            #!/usr/bin/env bash
            action_up() {
            case $DEVICE_IFACE in
            wlp*);;
            enp*);;
            wgpia*|tun*)
            # 10.0.0.242 - DNS
            # 10.0.0.243 - DNS+Streaming
            # 10.0.0.244 - DNS+MACE
            # 10.0.0.241 - DNS+Streaming+Mace
            install -DT -- /dev/stdin /etc/resolv.conf <<< 'nameserver 10.0.0.241'
            ;;
            esac
            }


            case ${NM_DISPATCHER_ACTION} in
            *up*) action_up
            ;;
            esac

    all_zsh_plugins:
      - 1password
      - aliases
      - alias-finder
      - ansible
      - ant
      - apache2-macports
      - arcanist
      - archlinux
      - arduino-cli
      - argocd
      - asdf
      - autoenv
      - autojump
      - autopep8
      - aws
      - azure
      - battery
      - bazel
      - bbedit
      - bedtools
      - bgnotify
      - bower
      - branch
      - brew
      - bridgetown
      - bun
      - bundler
      - cabal
      - cake
      - cakephp3
      - capistrano
      - cask
      - catimg
      - celery
      - charm
      - chruby
      - chucknorris
      - cloudfoundry
      - codeclimate
      - coffee
      - colemak
      - colored-man-pages
      - colorize
      - command-not-found
      - common-aliases
      - compleat
      - composer
      - conda-env
      - copybuffer
      - copyfile
      - copypath
      - cp
      - cpanm
      - dash
      - dbt
      - debian
      - deno
      - dircycle
      - direnv
      - dirhistory
      - dirpersist
      - dnf
      - dnote
      - docker
      - docker-compose
      - docker-machine
      - doctl
      - dotenv
      - dotnet
      - droplr
      - drush
      - eecms
      - emacs
      - ember-cli
      - emoji
      - emoji-clock
      - emotty
      - encode64
      - extract
      - eza
      - fabric
      - fancy-ctrl-z
      - fasd
      - fastfile
      - fbterm
      - fig
      - firewalld
      - flutter
      - fluxcd
      - fnm
      - forklift
      - fossil
      - frontend-search
      - fzf
      - gas
      - gatsby
      - gcloud
      - geeknote
      - gem
      - genpass
      - gh
      - git
      - git-auto-fetch
      - git-commit
      - git-escape-magic
      - git-extras
      - gitfast
      - git-flow
      - git-flow-avh
      - github
      - git-hubflow
      - gitignore
      - git-lfs
      - git-prompt
      - glassfish
      - globalias
      - gnu-utils
      - golang
      - gpg-agent
      - gradle
      - grails
      - grc
      - grunt
      - gulp
      - hanami
      - hasura
      - helm
      - heroku
      - heroku-alias
      - history
      - history-substring-search
      - hitchhiker
      - hitokoto
      - homestead
      - httpie
      - invoke
      - ionic
      - ipfs
      - isodate
      - istioctl
      - iterm2
      - jake-node
      - jenv
      - jfrog
      - jhbuild
      - jira
      - jruby
      - jsontools
      - juju
      - jump
      - kate
      - keychain
      - kind
      - kitchen
      - kitty
      - kn
      - knife
      - knife_ssh
      - kops
      - kubectl
      - kubectx
      - kube-ps1
      - lando
      - laravel
      - laravel4
      - laravel5
      - last-working-dir
      - lein
      - lighthouse
      - lol
      - lpass
      - lxd
      - macos
      - macports
      - magic-enter
      - man
      - marked2
      - marktext
      - mercurial
      - meteor
      - microk8s
      - minikube
      - mise
      - mix
      - mix-fast
      - mongo-atlas
      - mongocli
      - mosh
      - multipass
      - mvn
      - mysql-macports
      - n98-magerun
      - nanoc
      - nats
      - ng
      - nmap
      - node
      - nodenv
      - nomad
      - npm
      - nvm
      - oc
      - octozen
      - opentofu
      - operator-sdk
      - otp
      - pass
      - paver
      - pep8
      - percol
      - per-directory-history
      - perl
      - perms
      - phing
      - pip
      - pipenv
      - pj
      - please
      - pm2
      - pod
      - podman
      - poetry
      - poetry-env
      - postgres
      - pow
      - powder
      - powify
      - pre-commit
      - procs
      - profiles
      - pyenv
      - pylint
      - python
      - qodana
      - qrcode
      - rails
      - rake
      - rake-fast
      - rand-quote
      - rbenv
      - rbfu
      - rbw
      - react-native
      - rebar
      - redis-cli
      - repo
      - ros
      - rsync
      - ruby
      - rust
      - rvm
      - safe-paste
      - salt
      - samtools
      - sbt
      - scala
      - scd
      - screen
      - scw
      - sdk
      - sfdx
      - sfffe
      - shell-proxy
      - shrink-path
      - sigstore
      - singlechar
      - skaffold
      - snap
      - spring
      - sprunge
      - ssh
      - ssh-agent
      - stack
      - starship
      - stripe
      - sublime
      - sublime-merge
      - sudo
      - supervisor
      - suse
      - svcat
      - svn
      - svn-fast-info
      - swiftpm
      - symfony
      - symfony2
      - symfony6
      - systemadmin
      - systemd
      - taskwarrior
      - terminitor
      - term_tab
      - terraform
      - textastic
      - textmate
      - thefuck
      - themes
      - thor
      - tig
      - timer
      - tldr
      - tmux
      - tmux-cssh
      - tmuxinator
      - toolbox
      - torrent
      - transfer
      - tugboat
      - ubuntu
      - ufw
      - universalarchive
      - urltools
      - vagrant
      - vagrant-prompt
      - vault
      - vim-interaction
      - vi-mode
      - virtualenv
      - virtualenvwrapper
      - volta
      - vscode
      - vundle
      - wakeonlan
      - watson
      - wd
      - web-search
      - wp-cli
      - xcode
      - yarn
      - yii
      - yii2
      - yum
      - z
      - zbell
      - zeus
      - zoxide
      - zsh-interactive-cd
      - zsh-navigation-tools

    COMMENT: false

    environment:
      _global:
        GDK_DPI_SCALE: '1.0'
        GDK_SCALE: '1.0'
        TERM: 'screen-256color'
        SHELL: '/bin/zsh'
        LANG: 'en_US.UTF-8'
        LC_ALL: 'nb_NO.UTF-8'
        GDK_THEME: "Adwaita:dark"

      ls:
        LS_COLORS: >-
          # TODO

      grep:
        GREP_COLORS: >-
           ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36

    alacritty:
      config:
        live_config_reload: true
        import:
          - ~/opt/catppuccin/alacritty/catppuccin-mocha.toml

        env:
          GDK_DPI_SCALE: "1.0"
          GDK_SCALE: "1.0"
          TERM: screen-256color
          SHELL: /bin/zsh
          LANG: en_US.UTF-8
          LC_ALL: nb_NO.UTF-8

        scrolling:
          history: 0

        window:
          opacity: 0.9
          dynamic_title: true
          padding:
            x: 10
            "y": 8
          position:
            x: 0
            "y": 0

        colors:
          transparent_background_colors: true

        cursor:
          style:
            blinking: Always
            shape: Block

        hints:
          enabled:
            - regex: '[^ ]+\.rs:\d+:\d+'
              command:
                program: xdg-open
              mouse:
                enabled: true
        keyboard:
          bindings:
            - action: SpawnNewInstance
              key: Return
              mods: Control|Shift

        font:
          size: 10.0
          bold:
            family: UbuntuSansMono Nerd Font
            style: Bold
          bold_italic:
            family: UbuntuSansMono Nerd Font
            style: Bold Italic
          italic:
            family: UbuntuSansMono Nerd Font
            style: Italic
          normal:
            family: UbuntuSansMono Nerd Font
            style: Regular



    gh:
      config: |
        {{_gh.config|to_yaml}}

    waybar:
      config:
        height: 20
        spacing: 40
        width: 1280
        modules-left:
          - sway/mode
          - sway/window
        modules-center:
          - clock
        modules-right:
          - custom/project
          - power-profiles-daemon
          - pulseaudio
          - network
          - cpu
          - sway/language
          - battery
        sway/workspaces:
          disable-scroll: true
          all-outputs: true
          warp-on-scroll: false
          format: '{name}: {icon}'
          format-icons:
            "1": 
            "2": 
            "3": 
            "4": 
            "5": 
            urgent: 
            focused: 
            default: 
        keyboard-state:
          numlock: true
          capslock: true
          format: '{name} {icon}'
          format-icons:
            locked: 
            unlocked: 
        sway/mode:
          format: <span style="italic">{}</span>
        sway/scratchpad:
          format: '{icon} {count}'
          show-empty: false
          format-icons:
            - ""
            - 
          tooltip: true
          tooltip-format: '{app}: {title}'
        mpd:
          format: '{stateIcon} {consumeIcon}{randomIcon}{repeatIcon}{singleIcon}{artist} - {album} - {title} ({elapsedTime:%M:%S}/{totalTime:%M:%S}) ⸨{songPosition}|{queueLength}⸩ {volume}% '
          format-disconnected: Disconnected 
          format-stopped: '{consumeIcon}{randomIcon}{repeatIcon}{singleIcon}Stopped '
          unknown-tag: N/A
          interval: 5
          consume-icons:
            "on": ' '
          random-icons:
            "off": '<span color="#f53c3c"></span> '
            "on": ' '
          repeat-icons:
            "on": ' '
          single-icons:
            "on": '1 '
          state-icons:
            paused: 
            playing: 
          tooltip-format: MPD (connected)
          tooltip-format-disconnected: MPD (disconnected)
        idle_inhibitor:
          format: '{icon}'
          format-icons:
            activated: 
            deactivated: 
        tray:
          spacing: 10
        clock:
          tooltip-format: |-
            <big>{:%Y %B}</big>
            <tt><small>{calendar}</small></tt>
          format-alt: '{:%Y-%m-%d}'
        cpu:
          format: 
          format-icons:
            - ▁
            - ▂
            - ▃
            - ▄
            - ▅
            - ▆
            - ▇
            - █
          tooltip: false
        memory:
          format: '{}% '
        temperature:
          critical-threshold: 80
          format: '{temperatureC}°C {icon}'
          format-icons:
            - 
            - 
            - 
        backlight:
          format: '{percent}% {icon}'
          format-icons:
            - "\U0001F311"
            - "\U0001F318"
            - "\U0001F317"
            - "\U0001F316"
            - "\U0001F315"
        battery:
          states:
            warning: 30
            critical: 15
          format: '{icon}'
          format-full: '{icon}'
          format-charging: "\U000F0084"
          format-plugged: 
          format-alt: '{time} {icon}'
          format-icons:
            - "\U000F007A"
            - "\U000F007B"
            - "\U000F007C"
            - "\U000F007D"
            - "\U000F007E"
            - "\U000F007F"
            - "\U000F0080"
            - "\U000F0081"
            - "\U000F0082"
            - "\U000F0079"
          format-icons-charging:
            - "\U000F007A"
            - "\U000F007B"
            - "\U000F007C"
            - "\U000F007D"
            - "\U000F007E"
            - "\U000F007F"
            - "\U000F0080"
            - "\U000F0081"
            - "\U000F0082"
            - "\U000F0079"
          format-icons-discharging:
            - 
            - 
            - 
            - 
            - 
        battery#bat2:
          bat: BAT2
        power-profiles-daemon:
          format: '{icon}'
          tooltip-format: |-
            Power profile: {profile}
            Driver: {driver}
          tooltip: true
          format-icons:
            default: 
            performance: 
            balanced: ""
            power-saver: 
        network:
          format-wifi: 
          format-ethernet: '{ipaddr}/{cidr}'
          format-linked: '{ifname} (No IP)'
          format-disconnected: Disconnected ⚠
          format-alt: '{ifname}: {ipaddr}/{cidr}'
          tooltip-format: |
            bandwidthDownBits: {bandwidthDownBits}
            bandwidthTotalBits: {bandwidthTotalBits}
            bandwidthUpBits: {bandwidthUpBits}
            cidr: {cidr}
            essid: {essid}
            frequency: {frequency}
            gwaddr: {gwaddr}
            icon: {icon}
            ipaddr: {ipaddr}
            netmask: {netmask}
            signalStrength: {signalStrength}
            signaldBm: {signaldBm}
        pulseaudio:
          format: '{icon}'
          format-bluetooth: "\U000F0970"
          format-bluetooth-muted: "\U000F0970"
          format-muted: ""
          format-source: 
          format-source-muted: 
          format-icons:
            headphone: 
            phone: 
            portable: 
            car: 
            default:
              - 
              - 
              - 
          on-click: pavucontrol
        custom/spotify:
          format: <U+F1BC> {}
          max-length: 40
          interval: 30
          exec: $HOME/.config/waybar/mediaplayer.sh 2> /dev/null
          exec-if: pgrep spotify
          return-type: json
        custom/project:
          format: <U+F1BC> {}
          max-length: 40
          interval: 5
          exec: jo foo=bar
          on-click: notify-send foo
          return-type: json
        custom/media:
          format: '{icon} {}'
          return-type: json
          max-length: 40
          format-icons:
            spotify: 
            default: "\U0001F39C"
          escape: true
          exec: $HOME/.config/waybar/mediaplayer.py 2> /dev/null

    __waybar__:
    _gh:
      config: |
        version: "1"

        # What protocol to use when performing git operations. Supported values: ssh, https
        git_protocol: https

        # What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
        editor: emacsclient

        # When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
        prompt: enabled

        # A pager program to send command output to, e.g. "less". Set the value to "cat" to disable the pager.
        pager: /usr/bin/cat



        # The path to a unix socket through which send HTTP connections. If blank, HTTP traffic will be handled by net/http.DefaultTransport.
        http_unix_socket:

        # What web browser gh should use when opening URLs. If blank, will refer to environment.
        browser: firefox

        # Aliases allow you to create nicknames for gh commands
        aliases:

          tmux.buffer.grep: |
            !tmux capture-pane -p -S - | eval 'grep -- '

          tmux.buffer.dump: |
            !tmux capture-pane -p -S -

          grep.tmux.buffer: |
            !eval 'gh tmux.buffer.grep $@'

          clear.deploy_keys: '!gh repo deploy-key list --jq ''.[]|.id'' --json ''id'' | xargs -I DEPLOY_KEY gh repo deploy-key delete -- DEPLOY_KEY'
          rg: '!env NO_COLOR=1 rg --hidden --no-ignore --no-ignore-dot --no-ignore-exclude --no-ignore-files --no-ignore-global --no-ignore-messages --no-ignore-parent --no-ignore-vcs --no-config  --files-with-matches -- $@'
          fd: '!env NO_COLOR=1 fd --one-file-system -uuu -- $@'
          pass.ls: '!pass git ls-files | sed s/.gpg// | grep -- "${@:-.}"'
          cat: '!bat -- $@'
          pass: '!exec pass git ls-files -z | sed -zE ''s#\.gpg\n?#\n#g'''
          search.hosts: '!ssh $(gh cfg ssh.hammer) -- "command hammer --output=json host list --per-page 9999 --search ''$@''" | command jq'
          tmux.pipe.pane: '!tmux pipe-pane -I "$@"'
          tmux.send.pipe: '!xargs ${@:+--arg-file="$@"} -r0 tmux send'
          hide: '!rename -v  -- '''' ''.'' "$@"'
          hide.preview: '!rename --no-act --verbose  -- '''' ''.'' "$@"'
          ansible.vault.view: '!ansible-vault view $1'
          ansible.vault.encrypt: '!ansible-vault encrypt $1'
          ansible.vault.decrypt: '!ansible-vault decrypt $1'
          ansible.vault.encrypt-string: '!ansible-vault encrypt $1'
          ansible.vault.decrypt-string: '!ansible-vault decrypt $1'
          vault.view: '!ansible-vault view $1'
          vault.encrypt: '!ansible-vault encrypt $1'
          vault.decrypt: '!ansible-vault decrypt $1'
          co: pr checkout
          switch: auth switch
          repos: '!NO_COLOR=1 gh repo list --json nameWithOwner| jq -rcM ''.[][]'''
          clone: repo clone
          gists: gist ls
          last: '!exec tail -n1 $@'
          last.word: '!awk ''BEGIN{FS="[\n\t\0[:space:][:punct:]]"}END{print $NF}'''
          ls: '!exa --git -la -- $@'
          clean.output: tr --squeeze-repeats '\n'
          pass2vault: '!pass $1 | xargs ansible-vault --vault-password-file $(gh cfg ansible.password-file.vault) encrypt_string'
          mktemp: '!command mktemp --directory /dev/shm/.XXXXXXXXXXXXXX'
          tmux.send.secret-file: |
            !pushd $(gh mktemp)
            gh tmux-send-file
            tmux send "popd" Enter; sleep 1
            tmux send 'find "$OLDPWD"/ -not -type d -exec shred -uv {} \;' Enter; sleep 1
          ldap.search: |
            !
            read -r common < <(gh cfg ldap.args)
            case "$*" in
            *=*) command ldapsearch "$common" "$@";;
            *)   case $# in
            0) command ldapsearch "$common" name=$(hostname --short)
            command ldapsearch "$common" name=${USER:$(command id --user --name)}
            ;;
            esac
            esac
          tmux.send.file: |-
            !name="$(realpath $1)"
            short="$(basename $1)"
            EOF="__${short^^}_EOF"
            if ! [[ $TMUX_PANE ]]
            then
            tmux send "reset" Enter
            tmux send "ls -l" Enter
            base64 "$name" | `# *** SED BEGINNING ***` sed -zE 's#.*#\n\n base64 --decode << '"${EOF}"' | tee '"${short}"'\n\0\n'"${EOF}"'\n#g' `# *** SED END ***` |
            xargs -r0 tmux send
            fi
            echo
          fzf.menu-loop-TODO: |-
            while true; do
            while read input; do
            case "$input" in
            @exit) exit
            esac
            done < <(gh cfg tmux.default-opts| xargs fzf)
              done
          tmux.clip-out: '!tmux pipep -I "!wayland=\"wl-paste\";x11=\"xclip -out\";${!XDG_SESSION_TYPE}"'
          stdin2gh.alias: '!grep -Poz "\n[^#]+" -- ${@:-} | tr --squeeze-repeats \\n | tr \\n \;'
          ansible.doc: '!stdbuf -oL ansible-doc --list | rg --line-buffered -o -- ''^\S+'' | env - rg "${@:-.}"'
          update.environment: '!make -C ${HOME}/Documents/Projects/ENV/'
          wlsunset: '!systemd-run --user --unit wlsunset wlsunset -t 3000 -T 3100'
          run.user: '!systemd-run --user "$@"'
          truncate: '!colrm ${COLUMNS:-$(tput cols -T ${TERM:-xterm})}'
          trunc: '!gh truncate "$@"'
          cfg.add: '!for n; do; gh cfg --add "$(gh cfg cfg.selected)" "${n}" ; done'
          cfg.refresh.env: '!gh cfg cfg.env SWAYSOCK=/run/user/$(id -u)/sway-ipc.$(id -u).$(pgrep --exact sway).sock'
          install: |-
            !command install -DT "${1/-/\/dev/stdin}" "${2}"
            "0": >-
              !command tr "${1:-\n}" "\0"
          swap: '! cd "$(env -C ~/Projects/ ls -1 | fzf --reverse --max-lines 7 --header=Goto\ project)"'
          p: swap
          list.windows: '!command swaymsg -t get_tree | command jq ''.'''
          rofi: '!command rofi -show combi $@'
          yj: '!command ~/go/bin/yj -yj'
          jj: '!command ~/go/bin/yj -jj'
          tt: '!command ~/go/bin/yj -tt'
          yy: '!command ~/go/bin/yj -yy'
          jy: '!command ~/go/bin/yj -jy'
          _precmd: '!git config --get-regexp ^zsh.precmd'
          cfg.regexp: '!git config --get-regexp "$@"'
          cfg.grep: cfg-regexp
          _zsh: ^zsh\\.
          _fzf: ^fzf\\.
          _fd: ^fd\\.
          _rg: ^rg\\.
          dhcp.leases: '!ssh gh -- "cat /var/lib/dhcp/dhcpd.leases"'
          _tmux_send_file: '!git config --get ansible.vault-pass-file'
          extra.vars: '!gh pass-ls $(gh cfg provision.regex) | sed -E ''s#.*#\0: ''\''''$(pass \0)''\''''#'' | sed -zE ''s#.*#cat<<__EOF__\n\0__EOF__\n#'' | bash'
          pass2yaml: "!if [[ $@ ]]; then\n command gh pass-ls \"$*\" |\n   command sed -E  's#.*#\\0: $(pass \\0)#' |\n   command sed -zE 's#.*#cat<<__EOF__\\n---\\n\\0...\\n__EOF__\\n#' |\n   command /bin/bash \n fi\n"
          _tpm_pass: '!git config --get provision.tpm.pass'
          bootstrap: |
            !gh tmux-send-file $(gh _tmux_send_file)
            tmux send 'chmod +x *.sh' Enter
            sleep 1

            tmux send "clear" Enter Enter Enter
            pushd $(mktemp -d /dev/shm/.XXXXXXXXXXXXXXXX)
            pass $(gh _tpm_pass) > deleteme
            tmux send 'pushd $(mktemp -d /dev/shm/.XXXXXXXXXXXXXXXX)' Enter
            sleep 1

            gh tmux-send-file deleteme
            sleep 1

            tmux send 'cat deleteme | /root/tpm2-rw.sh' Enter
            sleep 1
          _debug: |
            !DEFAULT_DEBUGGER_SCRIPT="${HOME}/.local/bin/__debugger"

            enabled() {
            command gh cfg --bool debug.enabled "$*"
            }

            case $1 in
            run|start)
            exec $(command gh cfg debug.debugger)
            ;;
            on|up|enable|yes|true|1)
            enabled true
            ;;
            off|down|disable|no|false|0)
            enabled false
            ;;
            *)
            if test -s "${1}"; then
            read -r real < <(realpath "${1}")
            command gh cfg debug.script "${real}"
            enabled true
            fi
            esac

            cat <<'DEBUGGER_SCRIPT_EOF' | gh install -
            #!/usr/bin/env sh
            set -o xtrace

            export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(command id -u)/bus"
            export WAYLAND_DISPLAY='wayland-1'

            command notify-send "DEBUG" "args($#)$(@:+:'$*')"

            source "$(command gh cfg debug.script)"

            exit

            DEBUGGER_SCRIPT_EOF
          tmp: '!pushd $(mktemp -d /dev/shm/.XXXXXXXXXXX)'
          edit: '!${EDITOR} $@'
          _prefix_sed: '!command sed -E ''s#.*#''"${@}"''\0#'''
          _prefix_sd: '! command sd ''^'' "${@}"'
          _startswith_rg: '!env - NO_COLOR=1 rg -- "^$@"'
          _startswith_grep: '!env - grep -P -- "^$@"'
          _ext_fd: '!env - NO_COLOR=1 eval fd -e "$@"'
          prefix: _prefix_sed
          startswith: _startswith_grep
          clean: '!sed -zE ''s/#[^\n]*\n?//g;s/\n+/\n/g;s/[[:space:]]*$//'''
          igrep: LC_ALL=C grep -Pi -- "$@"
          select: '!gh clean | LC_ALL=C grep -Pi -- "$@"'
          pp: clean
          pgrep: LC_ALL=C grep -P -- "$@"
          toin: '!cat 2>&1'
          err: "!cat >&2\n  "
          facts: '!/opt/puppetlabs/bin/facter --json'
          rpm: |
            !bash "${HOME}"/Documents/Projects/script/needs-work/generate-repo-files.sh "$@"
          status: '!PAGER=cat command nmcli'
          backup: '!command /usr/bin/tar -C "${PWD}" --auto-compress -cf ${HOME}/Backup/${PWD//\//-}_BACKUP_`date -I`.tar.bz2 ./'
          git.filehist: log --format=oneline --
          adopt: '!echo TODO set gh profile as git remote if unset'
          each: '!gawk --assign cmd="${@//:/\$}" ''{system("echo "cmd)}'' '
          git.clean.upstream: '!sed -E ''/<{7}/,/={7}/d;/>{7}/d'' config'
          pkl: '!~/.local/bin/pkl "$@"'
          restore: '!rsync --dry-run --files-from - --relative --recursive -av -- 9Ooldhome/ $HOME/'
          pipx: '!~/.local/bin/pipx "$@"'
          ldap.delete: '!command ldapsearch -LLL -oldif_wrap=no name=${1}\* dn 2>/dev/null | sed -E ''/dn: /dev/stderr'' | awk ''/^[a-z]\w+: /{print $NF;exit}'' | xargs -r echo ldapdelete'
          cp: |-
            !exec env -C ~/ cp --parents -- "$@"
          truncate: >-
              !grep -Eo -- '^.{'`tput cols`'}'
          i: >-
            !wl-copy
          o: >-
            !wl-paste
          _zshrc: |
            !cat <<'EOF'
            plugins+=($(gh cfg --get-all zsh.plugins))
            . $ZSH/custom/_humioctl
            EOF
          zsh.plugins: |
            !fd  -d1 . $ZSH/plugins -X printf '%s\n' {/} | sort
          hammer: "!echo TODO ssh $(gh cfg ssh.hammer) -- \n"
          hammer.rebuild: |
            !echo TODO
          encrypt.tpm2: |
            !
            if [ -t 0 ]; then
            case $(stat -c '%F' "$1" 2>/dev/null) in
            *file*)
            sudo clevis encrypt tpm2 '{}' < "$1"
            ;;
            *)
            sudo clevis encrypt tpm2 '{}' <<< "$1"
            esac
            else
            sudo clevis encrypt tpm2 '{}'
            fi
          decrypt.tpm2: "!if [ -t 0 ]; then\n  case $(stat -c '%F' \"$1\" 2>/dev/null) in\n  *file*) sudo clevis decrypt tpm2  < \"$1\"   ;;\n  *)      sudo clevis decrypt tpm2  <<< \"$1\" ;;\n  esac\nelse\n  sudo clevis decrypt tpm2 \nfi\n"
          curl.config.reset: |
            !command /usr/bin/cat <<.curlrc_EOF | tee >(install -m 0600 -DTv /dev/stdin ~/.curlrc)
            .curlrc_EOF
          _gh_install_from_stdin_test: |
            !gh _gh_install_from_stdin "$(mktemp)" <<__EOF__
            become_password_file =     %(ansible.password-file.become)
            connection_password_file=  %(ansible.password-file.connection)
            vault_password_file=       %(ansible.password-file.vault)
            __EOF__
          _gh_install_from_stdin: |
            !trap 'bat "$cfg"' EXIT
            cfg="${cfg:-${1}}"; shift
            pushd $(mktemp -d /dev/shm/.XXXXXXXXXXXXXX)
            tee FILE
            cat FILE |
              sed -z 's|.*|\ncat<<__EOF__\n&\n__EOF__\n\n|;s#%(#$(gh cfg.getc #g' |
              tee >(sponge FILE)
            bash FILE | tee >(install -m 0600 -DTv -- /dev/stdin "$cfg")
            shred -uv FILE
          _cfg_interpolate: |-
            !command /usr/bin/sed -z
              's|.*|\ncat<<__EOF__\n&\n__EOF__\n\n|;s#%(#$(gh cfg.getc #g' |
              command /usr/bin/bash
          cfg.get: |
            !set -x
            git config --global --default="'$@' is unset\!" --get ${@-.}
          cfg.get-all: |
            !set -x
            git config --global --get-all ${@-.}
          cfg: |
            !${DEBUG:+set -x};
            # env --chdir=$(gh _cfg_helper)
            pushd -- $(gh _cfg_helper)
            export PAGER=cat
            git config --no-system --no-global --no-worktree --no-local --file .gitconfig "${@}"

          emacsclient: |
            !exec xargs -0 emacsclient --eval <<ELISP_EOF
            (with-temp-buffer (switch-to-buffer (window-buffer (nth 0 (window-list))))
              ${@:-(buffer-file-name)})
            ELISP_EOF

          ansible.config.show: |
            !bat ~/.ansible.cfg
          ansible.config.reset: |
            !gh _gh_install_from_stdin "$HOME/.ansible.cfg" <<__EOF__
            [defaults]
            nocolor=False

            transport=ssh
            host_key_checking = False

            become_password_file =     %(ansible.password-file.become)
            connection_password_file=  %(ansible.password-file.connection)
            vault_password_file=       %(ansible.password-file.vault)

            [connection]
            pipelining=True

            [paramiko_connection]
            host_key_auto_add=True
            look_for_keys=True
            __EOF__
          systemd.autostart: |
            !gh _gh_install_from_stdin "$HOME/.config/systemd/user/autostart@.service" <<__EOF__
            [Service]
            EnvironmentFile=${HOME}/.local/share/%P/env
            EnvironmentFile=-${HOME}/.local/share/%P/environ
            __EOF__

            systemd --user daemon-reload
          projects: |
            !command find ~/Projects -type d -name .git -printf '%h\n'
          paste.to.pass: |
            !wl-paste | pass insert --multiline tmp/${EPOCHSECONDS:-$(date +%s)}
          paste.last: |
            !gh pass-ls ^tmp/ | head -1 | xargs pass
          humio.refresh-token-file: '!pass humio_token | env -C ~/.humio install -v -m 0600 /dev/stdin .token'
          humio.search: '!~/opt/bin/humioctl search --token-file ~/.humio/.token $(gh cfg humio.repository) "$@"'
          humio.init: |
            !envsubst <<'.humio/config.yaml_EOF' | tee >(install -vDT -m 0600 /dev/stdin ~/.humio/config.yaml)
            ---
            address: https://humio.intern.sparebank1.no
            token_file: $HOME/.humio/.token
            ...
            .humio/config.yaml_EOF
          scrape.codeblocks: '!curl --silent -L "$@" | jq -Rr ''gsub("</?span[^>]*>";"")|match("<code [^>]+>(?<code>.*)</code>")'' | jq -r ''..|try select(.name)|{(.name):(.string)}'' | jq -r ''try select(.code)'''
          magic: |
            !wayland=wl-paste
            x11='xclip -out'
            set - ${@:-$(command ${!XDG_SESSION_TYPE})}

            while [[ $@ ]]; do
            case "$1" in
            *//github.com/*|*//gitlab.com/*)
            dir="${HOME}/".local/share/git
            mkdir -p -- "${dir}
            command git -C "${dir}" clone --depth 1 "$1"
            ;;

            *)
            builtin echo -- "ignored: $@"
            esac
            shift
            done

            command ${!XDG_SESSION_TYPE} >&2
          new: |
            !# TODO print templates for code projects
            # ..... docker-compose.yml, Makefile, .gitignore...
            case "$1" in
            *//github.com/*|*//gitlab.com/*)
            dir="${HOME}/".local/share/git
            mkdir -p -- "${dir}

            ;;

            *)
            builtin echo -- "ignored: $@"
            esac
            shift
          empty: |
            !find "${PWD}" -type f -writable -empty -print0 2>/dev/null | if [[ $@ ]]; then grep -wz -- "$@"
            else cat
            fi | xargs -0rn1
          with.gron: |
            !jq -cM '.' | gron | (
              eval "$@"
            ) | gron -u
          _parent_process_code: |
            printf 'grep -Po \x(?<=Ppid:\t)\s+ /proc/$$/status'
          _snippets: |
            !echo TODO _snippets
          _systemd_run_user: |
            !systemd-run --user "$@"
          _systemd_run_user_pipe_to_file: |
            !echo TODO gh _systemd_run_user -p StandardOutput="${1}" --pipe
          _gh_pager: |
            !gh _systemd_run_user_pipe_to_file
            bat --wrap never --file-name "$(tr \\0 ' ' < /proc/${PPID}/cmdline)"
          _tmux_prompt: |
            !env
            set
            echo TODO
          _zsh_prompt: |
            !zsh -c 'print -P $PS1'
          git.repo.clone.private.work: |
            !env -C $(gh cfg cfg.work) repo clone
          git.repo.clone.private.home: |
            !env -C $(gh cfg cfg.work.dir) repo clone
          clip: |
            !declare subcommand
            subcommand=$1; shift

            case $subcommand in
            add)
            (tee >(pass insert --multiline _/last) >(pass insert --multiline _/${EPOCHSECONDS})) &>/dev/null
            gh pass.ls ^_
            ;;
            pop)
            {
            gh pass.ls ^_ |
            grep -vw  -- last |
            tail -1 |
            xargs -d\\n -rn1 -i pass mv {} _/pop
            pass _/pop
            pass --clip _/pop
            pass rm --force _/pop
            } &>/dev/null
            ;;

            ls)
                gh pass.ls ^_ |
            ;;
            esac
          add.gist: '![[ $@ ]] || { echo "Filename required" >&2 ; exit; }; filename=$(systemd-escape --path "$@"); exec gh gist create - --filename "${filename} --private'
          add.ls: |
            !echo TODO
          add.gists: |
            !if [ -t 0 ]; then
              for n; do gh add.gist < "$n"; done &
            else
              gh add.gist "$@"
            fi
          transform.html.to.json: '!exec ~/go/bin/pup ''json{}'''
          transform.json.to.yml: '!exec yj -jy'
          transform.yaml.to.json: '!exec yj -yj'
          transform.json.to.toml: '!exec yj -jt'
          transform.toml.to.json: '!exec yj -tj'
          jq.append: '!exec jq ''{$ARGS.positional[0]:(.)}'' --args ${@:-data}'
          transform.json.to.pkl: '!VERSION=1.0.2; exec pkl eval package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe@${VERSION}#/json.pkl -x "${@:-pipe}"'
          withTemporaryDirectory: |
            !declare TEXT
            if ! tty; then
              mapfile TEXT
              export TEXT
            fi

            command mktemp -d /dev/shm/.XXXXXXXXXXXX |
              while read -r pwd; do
                pushd "${pwd}" &>/dev/null
                export CURL_HOME="${PWD}"
                if [[ $@ ]]; then
                  env -C "${OLDPWD}" $@ | tee out
                else
                  tee out <<< "${TEXT[@]}"
                fi
                wc -l out
                pass insert --multiline last/text < out &>/dev/null
                case $(file -s out | tee /dev/stderr) in
                  *JSON*)
                    declare -x cmd=(pass insert --multiline)
                    declare -x yj=~/go/bin/yj

                    tee >(${cmd[@]} last/json) >($yj -jy|${cmd[@]} last/yaml) < out

                    read type < <(jq -r type < out)

                    cat out |
                      case "${type}"  in
                        array)  jo output:=- ;;
                        object) cat ;;
                      esac | tee >(
                              $yj -jt|${cmd[@]} last/toml
                            ) >(
                              gh transform.json.to.pkl|${cmd[@]} last/pkl
                            )
                    ;;
                  esac &>/dev/null
                # rm -rvf -- "${OLDPWD}"
                rm -rvf /dev/shm/.????????????
              done
            popd &>/dev/null
          withTemporaryFile: null
          html2json: '!exec ~/go/bin/pup ''json{}'''
          getPubclicIP: |
            !exec curl --silent 'https://ifconfig.co/json'
          first: '!exec head -n1 $@'
          xcat: '!exec xargs cat'
          json2pkl: '!VERSION=1.0.2; URL=package://pkg.pkl-lang.org/pkl-pantry/pkl.pipe@${VERSION}#/json.pkl; exec pkl eval "$URL" -x "${@:-pipe}"'
          toml2pkl: '!yj -t | gh json2pkl "$@"'
          env: |
            !exec grep -Pi0z -- "${@:-.}" /proc/${PPID}/environ
          awk.env.var.names: |
            !set - ${PPID:-${$}}
            for PID; do
              awk 'BEGIN{RS="\0";ORS="\n";FS="=";}/^[[:upper:]_]+/{print $1}' /proc/${PID}/environ
            done
          _cfg_helper: |
            !set - ${HOME}/Projects/config
            echo -en "${1}"
            mkdir --parents -- "${_}"
            cd -- "${_}"
            if ! [ -d ${1} ]; then
              gh repo clone ${1##*/} || gh repo create --clone --private ${1##*/}
            fi &>/dev/null
            for i in $1/.git{config,ignore}; do
              if ! [ -f "$i" ]; then
                touch "$i"
              fi
            done
          _debug_cmdline: |
            !set -x
            xargs -n1 -0a /proc/${PPID}/cmdline
          _helper_debug: |
            !# FIXME #
            jq -r '.aliases|with_entries(.key|startswith("_debug_"))'
          _debug: |
            !yj < ~/.config/gh/config.yml
          cfg.dump: |
            !gh cfg --get-all
          cfg.ls: '!gh cfg --get-all | grep -- "${@:-.}"'
          cfg.regex: '!gh cfg --get-regexp "${@:-.}"'
          with.homedir: '!exec /usr/bin/env --chdir="$HOME" "$@"'
          deleteme.zsh.rc.pre: |
            !cat <<'.zshrc_EOF'
            # exec 3<>/dev/null
            .zshrc_EOF
          deleteme.zsh.rc.post: |
            !cat <<'.zshrc_EOF'
            plugins=(fd fzf z zoxide git gh pass ripgrep docker)
            export ZSH="$HOME/.oh-my-zsh"
            ZSH_THEME="gentoo"
            alias -- cat='command ~/.cargo/bin/bat'
            zpath=($zpath ~/.local/share/zsh)
            .zshrc_EOF
          _debug_current_gh_script: |
            !set -x
            set | grep BASH
            # install -DT -- "$0" /tmp/current.sh
            # bat /tmp/current.sh
          example.systemd.socket.fifo: |
            !set -x
            dir=${XDG_RUNTIME_DIR}/example
            userdir=${HOME}/.config/systemd/user
            debugger="Activated '%%i: %i | %%I: %I | %%P: %P'"

            systemctl --user daemon-reload
            mkdir -pv -- "$dir"

            cat <<SOCKET_EOF | tee >(install -vDT /dev/stdin ~/.config/systemd/user/example.socket)
            [Socket]
            ListenFIFO=${rundir/${XDG_RUNTIME_DIR}/%t}/fifo
            SocketMode=0660

            [Install]
            WantedBy=sockets.target
            SOCKET_EOF

            cat <<SERVICE_EOF | tee >(install -vDT /dev/stdin ~/.config/systemd/user/example.service)
            [Service]
            Type=oneshot
            # ExecStart=xargs -0 notify-send "Example socket activated"
            ExecStart=cat
            StandardInput=socket
            StandardOutput=journal
            # Restart=no
            SERVICE_EOF

            systemctl --user daemon-reload
            systemctl --user enable example.{socket,service}
            systemctl --user start example.socket
            stat $rundir/example.sock
            tee "${_}" <<< foo
            systemctl --user disable --now example.socket
            systemctl --user stop example.socket
            rm -vf -- $userdir/example.* $rundir
            systemctl --user daemon-reload
          example.systemd.socket.unix: |
            !set -x
            mkdir -pv -- ${XDG_RUNTIME_DIR}/deleteme/
            cat <<SOCKET_EOF | tee >(install -vDT /dev/stdin ~/.config/systemd/user/example.socket)
            [Socket]
            ListenStream=%t/deleteme/example.sock
            SocketMode=0660

            [Install]
            WantedBy=sockets.target
            SOCKET_EOF

            cat <<SERVICE_EOF | tee >(install -vDT /dev/stdin ~/.config/systemd/user/example.service)
            [Service]
            Type=oneshot
            ExecStart=notify-send "Example socket" "Activated"
            Restart=no
            SERVICE_EOF
            systemctl --user daemon-reload
            systemctl --user enable --now example.socket
            stat ${XDG_RUNTIME_DIR}/deleteme/example.sock
            nc -U "${_}" <<< foo
            systemctl --user disable --now example.socket
          run: |
            !systemd-run --user "$@"
          _jq_example_from_stackexchange: |-
            !`# https://unix.stackexchange.com/questions/561460/how-to-print-path-and-key-values-of-json-file` jq -r 'paths(scalars | true) as $p  |
              [
                ( [ $p[] | tostring ] | join(".") ), ( getpath($p) | tojson )
              ] |
              join(": ")'
          _WORK_IN_PROGESS_json_dict_navigator: |
            !
            pushd $(mktemp -d) &>/dev/null
            tee original.json current.json

            export FZF_DEFAULT_COMMAND="jq 'keys' < current.json"
            export FZF_DEFAULT_OPTS="--preview=\"jq '.{}' < current.json\""

            while read SELECTION ; do
              [[ $SELECTION ]] || break
              jq ".${SELECTION}" < current.json | tee >(sponge current.json) /dev/tty
            done < <(fzf)
          clean.empty.files: |
            exec rm -iv -- $(find -maxdepth 1 -type f -empty)
          import-config-force: |-
            !exec realpath --relative-base=$HOME/ "$@" |
              rsync -av --files-from=- --relative -- "$HOME"/ ~/Projects/config/;
              notify-send "Config imported" "$@"
          import-config: |-
            !exec realpath --relative-base=$HOME/  "$@" |
              rsync --dry-run -av --files-from=- --relative -- "$HOME"/ ~/Projects/config/
          _rofi_window_command: '!DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus WAYLAND_DISPLAY=wayland-1 notify-send "_rofi_window_command" "$@"'
          indent: |
            !eval sed -E 's#^#${@:-}#'
          ___: '!sed -E ''s/[[:space:]](copy|file|service)://'''

...
